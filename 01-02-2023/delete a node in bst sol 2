/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public TreeNode deleteNode(TreeNode root, int key) {
        if(root==null){
            return null;
        }
        if(root.val==key){
            return updateBST(root);
        }
        TreeNode curr = root;
        while(root!=null){
            if(key<root.val){
                if(root.left!=null && root.left.val==key){
                    root.left=updateBST(root.left);
                }
                else{
                    root=root.left;
                }
            }
            else if(key>root.val){
                if(root.right!=null && root.right.val==key){
                    root.right=updateBST(root.right);
                }
                else{
                    root=root.right;
                }
            }
        }
        return curr;
    }
    public TreeNode updateBST(TreeNode root ){
        if(root.left==null){
            return root.right;
        }
        else if(root.right==null){
            return root.left;
        }
        TreeNode rightchild = root.right;
        TreeNode temp = findMaximum(root.left);
        temp.right=rightchild;
        return root.left;
    }
    public TreeNode findMaximum(TreeNode node){
        while(node.right!=null){
            node=node.right;
        }
        return node;
    }
}
