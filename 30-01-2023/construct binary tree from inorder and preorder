Given two integer arrays preorder and inorder where preorder is the preorder traversal of a binary tree and inorder is the inorder traversal of the same tree, 
construct and return the binary tree.

Example 1:
Input: preorder = [3,9,20,15,7], inorder = [9,3,15,20,7]
Output: [3,9,20,null,null,15,7]

Example 2:
Input: preorder = [-1], inorder = [-1]
Output: [-1]

class Solution {
    public TreeNode buildTree(int[] preorder, int[] inorder) {
        HashMap<Integer, Integer> map = new HashMap<>();
        for(int i=0; i<inorder.length;i++){
            map.put(inorder[i], i);
        }
        TreeNode node = constructBT(preorder, 0, preorder.length-1, inorder, 0, inorder.length-1, map);
        return node;
    }
    public TreeNode constructBT(int[] pre, int preStart, int preEnd, int[]in , int inStart, int inEnd, HashMap<Integer, Integer> map){
        if(preStart>preEnd || inStart>inEnd){
            return null;
        }
        TreeNode root = new TreeNode(pre[preStart]);
        int ind = map.get(root.val);
        int len = ind-inStart;
        root.left = constructBT(pre, preStart+1, preStart+len, in, inStart, ind-1,map);
        root.right= constructBT(pre, preStart+len+1, preEnd,in, ind+1, inEnd, map);
        return root;
    }
}
